/* Generated By:JavaCC: Do not edit this line. JaCaMoProjectParser.java */
package jacamo.project.parser;

import java.util.*;
import java.io.*;
import jacamo.project.*;
import jason.mas2j.*;
import jason.asSyntax.*;
import jason.asSemantics.*;
import jason.jeditplugin.*;
import jason.asSyntax.ArithExpr.ArithmeticOp;
import jason.asSyntax.LogExpr.LogicalOp;
import jason.asSyntax.RelExpr.RelationalOp;

public class JaCaMoProjectParser implements JaCaMoProjectParserConstants {


    JaCaMoProject project = null;

    // Methods from Jason ASL parser

    private String getSourceRef(SourceInfo s) {
        if (s == null)
            return "[]";
        else
            return "["+s.getSrcFile()+":"+s.getBeginSrcLine()+"]";
    }
    private String getSourceRef(DefaultTerm t) {
        return getSourceRef( t.getSrcInfo());
    }
    private String getSourceRef(Object t) {
        if (t instanceof DefaultTerm)
            return getSourceRef((DefaultTerm)t);
        else if (t instanceof SourceInfo)
            return getSourceRef((SourceInfo)t);
        else
            return "[]";
    }
    private Term changeToAtom(Object o) {
        Term u = (Term)o;
        if (u == Literal.LTrue)
            return u;
        if (u == Literal.LFalse)
            return u;
        if (u.isAtom())
           return new Atom((Literal)u);
        return u;
    }

/* Configuration Grammar */
  final public JaCaMoProject parse(String directory) throws ParseException {
                                                    Token masId; File f = null; ClassParameters cp; String h; Token id; boolean r;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(EOL);
    }
    jj_consume_token(MAS);
    masId = jj_consume_token(ATOM);
                                 project = new JaCaMoProject();
                                 project.setSocName(masId.image);
                                 project.setDirectory(directory);
                                 project.initAgMap();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case USES:
      jj_consume_token(USES);
      f = fileName();
                                project.importProject(directory,f);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 57:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        jj_consume_token(57);
        f = fileName();
                                project.importProject(directory,f);
      }
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      jj_consume_token(EOL);
    }
    jj_consume_token(58);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      jj_consume_token(EOL);
    }
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AGENT:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_5;
      }
      agent();
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WORKSPACE:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_6;
      }
      workspace();
    }
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ORG:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_7;
      }
      organisation();
    }
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NODE:
      case CLASSPATH:
      case ASLPATH:
      case PLATFORM:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASSPATH:
        jj_consume_token(CLASSPATH);
        jj_consume_token(59);
        label_9:
        while (true) {
          if (jj_2_1(4)) {
            ;
          } else {
            break label_9;
          }
          f = fileName();
          label_10:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case EOL:
              jj_consume_token(EOL);
              break;
            case 57:
              jj_consume_token(57);
              break;
            default:
              jj_la1[9] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case EOL:
            case 57:
              ;
              break;
            default:
              jj_la1[10] = jj_gen;
              break label_10;
            }
          }
                                                                                          project.addClassPath(f.toString());
        }
        break;
      case ASLPATH:
        jj_consume_token(ASLPATH);
        jj_consume_token(59);
        label_11:
        while (true) {
          if (jj_2_2(4)) {
            ;
          } else {
            break label_11;
          }
          f = fileName();
          label_12:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case EOL:
              jj_consume_token(EOL);
              break;
            case 57:
              jj_consume_token(57);
              break;
            default:
              jj_la1[11] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case EOL:
            case 57:
              ;
              break;
            default:
              jj_la1[12] = jj_gen;
              break label_12;
            }
          }
                                                                                          project.addSourcePath(f.toString());
        }
        break;
      case PLATFORM:
        jj_consume_token(PLATFORM);
        jj_consume_token(59);
                                                                                          project.resetPlatform();
        label_13:
        while (true) {
          if (jj_2_3(4)) {
            ;
          } else {
            break label_13;
          }
          cp = classDef();
          label_14:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case EOL:
              jj_consume_token(EOL);
              break;
            case 57:
              jj_consume_token(57);
              break;
            default:
              jj_la1[13] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case EOL:
            case 57:
              ;
              break;
            default:
              jj_la1[14] = jj_gen;
              break label_14;
            }
          }
                                                                                          project.addPlatformParameters(cp);
        }
        break;
      case NODE:
        jj_consume_token(NODE);
        id = jj_consume_token(ATOM);
                                   r = false;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RUNNING:
          jj_consume_token(RUNNING);
                                                               r = true;
          break;
        default:
          jj_la1[15] = jj_gen;
          ;
        }
                                   h = null;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 60:
          jj_consume_token(60);
          h = host();
          break;
        default:
          jj_la1[16] = jj_gen;
          ;
        }
        label_15:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EOL:
            jj_consume_token(EOL);
            break;
          case 57:
            jj_consume_token(57);
            break;
          default:
            jj_la1[17] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EOL:
          case 57:
            ;
            break;
          default:
            jj_la1[18] = jj_gen;
            break label_15;
          }
        }
                                                                                          project.addNodeHost(id.image,h,r);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(61);
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_16;
      }
      jj_consume_token(EOL);
    }
    jj_consume_token(0);
                              project.parserFinished(); {if (true) return project;}
    throw new Error("Missing return statement in function");
  }

  final public void agent() throws ParseException {
                              Token agType; Token agName; Token qty; Token opt; Token t; Object oval;
                              JaCaMoAgentParameters ag = new JaCaMoAgentParameters(project);
                              ClassParameters arch;
                              Literal l;
                              List<String> instances = new ArrayList<String>();
                              String h = null; String n = null;
    jj_consume_token(AGENT);
    agName = jj_consume_token(ATOM);
                              ag.name = agName.image;
                              ag.asSource = new File(agName.image+".asl");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 59:
      jj_consume_token(59);
      ag.asSource = fileName();
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 58:
      jj_consume_token(58);
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EOL:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_17;
        }
        jj_consume_token(EOL);
      }
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INSTANCES:
        case AGARCH:
        case AGCLASS:
        case AGBBCLASS:
        case BELIEF:
        case GOAL:
        case NODE:
        case FOCUS:
        case JOIN:
        case ROLES:
        case DEBUG:
        case ATOM:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_18;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INSTANCES:
          jj_consume_token(INSTANCES);
          jj_consume_token(59);
          if (jj_2_4(4)) {
            oval = jj_consume_token(INT);
            label_19:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case EOL:
                jj_consume_token(EOL);
                break;
              case 57:
                jj_consume_token(57);
                break;
              default:
                jj_la1[24] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case EOL:
              case 57:
                ;
                break;
              default:
                jj_la1[25] = jj_gen;
                break label_19;
              }
            }
                                                                                   ag.setNbInstances( new Integer(oval.toString()));
          } else {
            label_20:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case ATOM:
                ;
                break;
              default:
                jj_la1[26] = jj_gen;
                break label_20;
              }
              opt = jj_consume_token(ATOM);
              label_21:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case EOL:
                  jj_consume_token(EOL);
                  break;
                case 57:
                  jj_consume_token(57);
                  break;
                default:
                  jj_la1[27] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case EOL:
                case 57:
                  ;
                  break;
                default:
                  jj_la1[28] = jj_gen;
                  break label_21;
                }
              }
                                                                                   instances.add(opt.image);
            }
          }
          break;
        case NODE:
          jj_consume_token(NODE);
          jj_consume_token(59);
          opt = jj_consume_token(ATOM);
          label_22:
          while (true) {
            jj_consume_token(EOL);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case EOL:
              ;
              break;
            default:
              jj_la1[29] = jj_gen;
              break label_22;
            }
          }
                                                                                   ag.setHost(opt.image);
          break;
        case AGARCH:
          jj_consume_token(AGARCH);
          jj_consume_token(59);
          label_23:
          while (true) {
            if (jj_2_5(4)) {
              ;
            } else {
              break label_23;
            }
            arch = classDef();
            label_24:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case EOL:
                jj_consume_token(EOL);
                break;
              case 57:
                jj_consume_token(57);
                break;
              default:
                jj_la1[30] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case EOL:
              case 57:
                ;
                break;
              default:
                jj_la1[31] = jj_gen;
                break label_24;
              }
            }
                                                                                   ag.insertArchClass(arch);
          }
          break;
        case AGCLASS:
          jj_consume_token(AGCLASS);
          jj_consume_token(59);
          ag.agClass = classDef();
          label_25:
          while (true) {
            jj_consume_token(EOL);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case EOL:
              ;
              break;
            default:
              jj_la1[32] = jj_gen;
              break label_25;
            }
          }
          break;
        case AGBBCLASS:
          jj_consume_token(AGBBCLASS);
          jj_consume_token(59);
          ag.bbClass = classDef();
          label_26:
          while (true) {
            jj_consume_token(EOL);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case EOL:
              ;
              break;
            default:
              jj_la1[33] = jj_gen;
              break label_26;
            }
          }
          break;
        case BELIEF:
          jj_consume_token(BELIEF);
          jj_consume_token(59);
          label_27:
          while (true) {
            if (jj_2_6(4)) {
              ;
            } else {
              break label_27;
            }
            l = literal();
            label_28:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case EOL:
                jj_consume_token(EOL);
                break;
              case 57:
                jj_consume_token(57);
                break;
              default:
                jj_la1[34] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case EOL:
              case 57:
                ;
                break;
              default:
                jj_la1[35] = jj_gen;
                break label_28;
              }
            }
                                                                                   ag.addInitBel(l);
          }
          break;
        case GOAL:
          jj_consume_token(GOAL);
          jj_consume_token(59);
          label_29:
          while (true) {
            if (jj_2_7(4)) {
              ;
            } else {
              break label_29;
            }
            l = literal();
            label_30:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case EOL:
                jj_consume_token(EOL);
                break;
              case 57:
                jj_consume_token(57);
                break;
              default:
                jj_la1[36] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case EOL:
              case 57:
                ;
                break;
              default:
                jj_la1[37] = jj_gen;
                break label_30;
              }
            }
                                                                                   ag.addInitGoal(l);
          }
          break;
        case FOCUS:
          jj_consume_token(FOCUS);
          jj_consume_token(59);
          label_31:
          while (true) {
            if (jj_2_8(4)) {
              ;
            } else {
              break label_31;
            }
            oval = jj_consume_token(ATOM);
                                                                                   n = null;
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 60:
              jj_consume_token(60);
              t = jj_consume_token(ATOM);
                                                                                   n = t.image;
              break;
            default:
              jj_la1[38] = jj_gen;
              ;
            }
            label_32:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case EOL:
                jj_consume_token(EOL);
                break;
              case 57:
                jj_consume_token(57);
                break;
              default:
                jj_la1[39] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case EOL:
              case 57:
                ;
                break;
              default:
                jj_la1[40] = jj_gen;
                break label_32;
              }
            }
                                                                                   ag.addFocus(oval.toString(), n);
          }
          break;
        case JOIN:
          jj_consume_token(JOIN);
          jj_consume_token(59);
          label_33:
          while (true) {
            if (jj_2_9(4)) {
              ;
            } else {
              break label_33;
            }
            oval = jj_consume_token(ATOM);
                                                                                   n = null;
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 60:
              jj_consume_token(60);
              t = jj_consume_token(ATOM);
                                                                                   n = t.image;
              break;
            default:
              jj_la1[41] = jj_gen;
              ;
            }
            label_34:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case EOL:
                jj_consume_token(EOL);
                break;
              case 57:
                jj_consume_token(57);
                break;
              default:
                jj_la1[42] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case EOL:
              case 57:
                ;
                break;
              default:
                jj_la1[43] = jj_gen;
                break label_34;
              }
            }
                                                                                   ag.addWorkspace(oval.toString(), n);
          }
          break;
        case ROLES:
          jj_consume_token(ROLES);
          jj_consume_token(59);
          label_35:
          while (true) {
            if (jj_2_10(4)) {
              ;
            } else {
              break label_35;
            }
            opt = jj_consume_token(ATOM);
            jj_consume_token(IN);
            oval = jj_consume_token(ATOM);
                                                                                   n = null;
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 60:
              jj_consume_token(60);
              t = jj_consume_token(ATOM);
                                                                                   n = t.image;
              break;
            default:
              jj_la1[44] = jj_gen;
              ;
            }
            label_36:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case EOL:
                jj_consume_token(EOL);
                break;
              case 57:
                jj_consume_token(57);
                break;
              default:
                jj_la1[45] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case EOL:
              case 57:
                ;
                break;
              default:
                jj_la1[46] = jj_gen;
                break label_36;
              }
            }
                                                                                   if (n != null) ag.addFocus(oval.toString(), n);
                                                                                   ag.addRole(oval.toString(), opt.toString());
          }
          break;
        case DEBUG:
          jj_consume_token(DEBUG);
          jj_consume_token(59);
          oval = literal();
          label_37:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case EOL:
              jj_consume_token(EOL);
              break;
            case 57:
              jj_consume_token(57);
              break;
            default:
              jj_la1[47] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case EOL:
            case 57:
              ;
              break;
            default:
              jj_la1[48] = jj_gen;
              break label_37;
            }
          }
                                                                                   ag.addOption("debug", oval.toString());
          break;
        case ATOM:
          opt = jj_consume_token(ATOM);
          jj_consume_token(59);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case STRING:
            oval = jj_consume_token(STRING);
            break;
          case REAL:
            oval = jj_consume_token(REAL);
            break;
          case INT:
            oval = jj_consume_token(INT);
            break;
          case VAR:
          case TK_TRUE:
          case TK_FALSE:
          case TK_NEG:
          case TK_BEGIN:
          case TK_END:
          case ATOM:
          case UNNAMEDVAR:
            oval = literal();
            break;
          default:
            jj_la1[49] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          label_38:
          while (true) {
            jj_consume_token(EOL);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case EOL:
              ;
              break;
            default:
              jj_la1[50] = jj_gen;
              break label_38;
            }
          }
                                                                                   ag.addOption(opt.image,oval.toString());
          break;
        default:
          jj_la1[51] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(61);
      break;
    default:
      jj_la1[52] = jj_gen;
      ;
    }
    label_39:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
        ;
        break;
      default:
        jj_la1[53] = jj_gen;
        break label_39;
      }
      jj_consume_token(EOL);
    }
                             if (instances.isEmpty()) {
                                project.addAgent(ag);
                             } else {
                                for (String i: instances) {
                                    AgentParameters na = ag.copy();
                                    na.name = i;
                                    project.addAgent(na);
                                }
                             }
  }

  final public void workspace() throws ParseException {
                              Token t;
                              JaCaMoWorkspaceParameters wks = new JaCaMoWorkspaceParameters(project);
    jj_consume_token(WORKSPACE);
    t = jj_consume_token(ATOM);
                              wks.setName(t.image);
    jj_consume_token(58);
    label_40:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
        ;
        break;
      default:
        jj_la1[54] = jj_gen;
        break label_40;
      }
      jj_consume_token(EOL);
    }
    label_41:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NODE:
      case DEBUG:
      case ARTIFACT:
      case AGENTS:
        ;
        break;
      default:
        jj_la1[55] = jj_gen;
        break label_41;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARTIFACT:
        artifact(wks);
        break;
      case AGENTS:
        jj_consume_token(AGENTS);
        jj_consume_token(59);
        label_42:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AST:
          case ATOM:
            ;
            break;
          default:
            jj_la1[56] = jj_gen;
            break label_42;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ATOM:
            t = jj_consume_token(ATOM);
            break;
          case AST:
            t = jj_consume_token(AST);
            break;
          default:
            jj_la1[57] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          label_43:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case EOL:
              jj_consume_token(EOL);
              break;
            case 57:
              jj_consume_token(57);
              break;
            default:
              jj_la1[58] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case EOL:
            case 57:
              ;
              break;
            default:
              jj_la1[59] = jj_gen;
              break label_43;
            }
          }
                                                               project.addAgWorkspace(t.image,wks);
        }
        break;
      case NODE:
        jj_consume_token(NODE);
        jj_consume_token(59);
        t = jj_consume_token(ATOM);
        label_44:
        while (true) {
          jj_consume_token(EOL);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EOL:
            ;
            break;
          default:
            jj_la1[60] = jj_gen;
            break label_44;
          }
        }
                                                               wks.setNode(t.image);
        break;
      case DEBUG:
        jj_consume_token(DEBUG);
        label_45:
        while (true) {
          jj_consume_token(EOL);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EOL:
            ;
            break;
          default:
            jj_la1[61] = jj_gen;
            break label_45;
          }
        }
                                                               wks.setDebug(true);
        break;
      default:
        jj_la1[62] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(61);
    label_46:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
        ;
        break;
      default:
        jj_la1[63] = jj_gen;
        break label_46;
      }
      jj_consume_token(EOL);
    }
                              project.addWorkspace(wks);
  }

  final public void artifact(JaCaMoWorkspaceParameters wks) throws ParseException {
                              Token t; Token a;
                              ClassParameters cp;
    jj_consume_token(ARTIFACT);
    t = jj_consume_token(ATOM);
    jj_consume_token(59);
    cp = classDef();
                                                wks.addArtifact(t.image,cp);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 58:
      jj_consume_token(58);
      label_47:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EOL:
          ;
          break;
        default:
          jj_la1[64] = jj_gen;
          break label_47;
        }
        jj_consume_token(EOL);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FOCUSED:
        jj_consume_token(FOCUSED);
        jj_consume_token(59);
        label_48:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AST:
          case ATOM:
            ;
            break;
          default:
            jj_la1[65] = jj_gen;
            break label_48;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ATOM:
            a = jj_consume_token(ATOM);
            break;
          case AST:
            a = jj_consume_token(AST);
            break;
          default:
            jj_la1[66] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          label_49:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case EOL:
              jj_consume_token(EOL);
              break;
            case 57:
              jj_consume_token(57);
              break;
            default:
              jj_la1[67] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case EOL:
            case 57:
              ;
              break;
            default:
              jj_la1[68] = jj_gen;
              break label_49;
            }
          }
                                                                   project.addAgFocus(a.image,t.image,wks);
        }
        break;
      default:
        jj_la1[69] = jj_gen;
        ;
      }
      jj_consume_token(61);
      break;
    default:
      jj_la1[70] = jj_gen;
      ;
    }
    label_50:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
        ;
        break;
      default:
        jj_la1[71] = jj_gen;
        break label_50;
      }
      jj_consume_token(EOL);
    }
                              project.addWorkspace(wks);
  }

  final public void organisation() throws ParseException {
                              Token t;  Token opt; Object oval;
                              JaCaMoGroupParameters g;
                              JaCaMoOrgParameters org = new JaCaMoOrgParameters(project);
    jj_consume_token(ORG);
    t = jj_consume_token(ATOM);
                             org.setName(t.image);
                             org.addParameter("source",t.image+".xml");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 59:
      jj_consume_token(59);
      oval = fileName();
                             org.addParameter("source",oval.toString());
      break;
    default:
      jj_la1[72] = jj_gen;
      ;
    }
    jj_consume_token(58);
    label_51:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
        ;
        break;
      default:
        jj_la1[73] = jj_gen;
        break label_51;
      }
      jj_consume_token(EOL);
    }
    label_52:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NODE:
      case AGENTS:
      case GROUP:
      case SCHEME:
      case ATOM:
        ;
        break;
      default:
        jj_la1[74] = jj_gen;
        break label_52;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GROUP:
        g = group(org);
                                   org.addGroup(g);
        break;
      case SCHEME:
        scheme(org);
        break;
      case AGENTS:
        jj_consume_token(AGENTS);
        jj_consume_token(59);
        label_53:
        while (true) {
          if (jj_2_11(4)) {
            ;
          } else {
            break label_53;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ATOM:
            t = jj_consume_token(ATOM);
            break;
          case AST:
            t = jj_consume_token(AST);
            break;
          default:
            jj_la1[75] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          label_54:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case EOL:
              jj_consume_token(EOL);
              break;
            case 57:
              jj_consume_token(57);
              break;
            default:
              jj_la1[76] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case EOL:
            case 57:
              ;
              break;
            default:
              jj_la1[77] = jj_gen;
              break label_54;
            }
          }
                                                                                         project.addAgWorkspace(t.image,org);
        }
        break;
      case NODE:
        jj_consume_token(NODE);
        jj_consume_token(59);
        opt = jj_consume_token(ATOM);
        label_55:
        while (true) {
          jj_consume_token(EOL);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EOL:
            ;
            break;
          default:
            jj_la1[78] = jj_gen;
            break label_55;
          }
        }
                                                                                         org.setNode(opt.image);
        break;
      case ATOM:
        opt = jj_consume_token(ATOM);
        jj_consume_token(59);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING:
          oval = jj_consume_token(STRING);
          break;
        case REAL:
          oval = jj_consume_token(REAL);
          break;
        case INT:
          oval = jj_consume_token(INT);
          break;
        case VAR:
        case TK_TRUE:
        case TK_FALSE:
        case TK_NEG:
        case TK_BEGIN:
        case TK_END:
        case ATOM:
        case UNNAMEDVAR:
          oval = literal();
          break;
        default:
          jj_la1[79] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_56:
        while (true) {
          jj_consume_token(EOL);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EOL:
            ;
            break;
          default:
            jj_la1[80] = jj_gen;
            break label_56;
          }
        }
                                                                                                          org.addParameter(opt.image,oval.toString());
        break;
      default:
        jj_la1[81] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(61);
    label_57:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
        ;
        break;
      default:
        jj_la1[82] = jj_gen;
        break label_57;
      }
      jj_consume_token(EOL);
    }
                              project.addOrg(org);
  }

  final public JaCaMoGroupParameters group(JaCaMoOrgParameters org) throws ParseException {
                             Token t; Token r; Token type; Token opt; Object oval;
                             JaCaMoGroupParameters sg;
                             JaCaMoGroupParameters g = new JaCaMoGroupParameters(project);
    jj_consume_token(GROUP);
    t = jj_consume_token(ATOM);
    jj_consume_token(59);
    type = jj_consume_token(ATOM);
                                                       g.setName(t.image); g.setType(type.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 58:
      jj_consume_token(58);
      label_58:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EOL:
          ;
          break;
        default:
          jj_la1[83] = jj_gen;
          break label_58;
        }
        jj_consume_token(EOL);
      }
      label_59:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DEBUG:
        case GROUP:
        case RESPFOR:
        case PLAYERS:
        case ATOM:
          ;
          break;
        default:
          jj_la1[84] = jj_gen;
          break label_59;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GROUP:
          sg = group(org);
                                                       g.addSubGroup(sg);
          break;
        case RESPFOR:
          jj_consume_token(RESPFOR);
          jj_consume_token(59);
          t = jj_consume_token(ATOM);
          label_60:
          while (true) {
            jj_consume_token(EOL);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case EOL:
              ;
              break;
            default:
              jj_la1[85] = jj_gen;
              break label_60;
            }
          }
                                                       g.addParameter("responsible-for", t.image);
          break;
        case DEBUG:
          jj_consume_token(DEBUG);
          label_61:
          while (true) {
            jj_consume_token(EOL);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case EOL:
              ;
              break;
            default:
              jj_la1[86] = jj_gen;
              break label_61;
            }
          }
                                                       g.setDebug(true);
          break;
        case ATOM:
          opt = jj_consume_token(ATOM);
          jj_consume_token(59);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case STRING:
            oval = jj_consume_token(STRING);
            break;
          case REAL:
            oval = jj_consume_token(REAL);
            break;
          case INT:
            oval = jj_consume_token(INT);
            break;
          case VAR:
          case TK_TRUE:
          case TK_FALSE:
          case TK_NEG:
          case TK_BEGIN:
          case TK_END:
          case ATOM:
          case UNNAMEDVAR:
            oval = literal();
            break;
          default:
            jj_la1[87] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          label_62:
          while (true) {
            jj_consume_token(EOL);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case EOL:
              ;
              break;
            default:
              jj_la1[88] = jj_gen;
              break label_62;
            }
          }
                                                                                                          g.addParameter(opt.image,oval.toString());
          break;
        case PLAYERS:
          jj_consume_token(PLAYERS);
          jj_consume_token(59);
          label_63:
          while (true) {
            if (jj_2_12(4)) {
              ;
            } else {
              break label_63;
            }
            t = jj_consume_token(ATOM);
            r = jj_consume_token(ATOM);
            label_64:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case EOL:
                jj_consume_token(EOL);
                break;
              case 57:
                jj_consume_token(57);
                break;
              default:
                jj_la1[89] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case EOL:
              case 57:
                ;
                break;
              default:
                jj_la1[90] = jj_gen;
                break label_64;
              }
            }
                                                                                        project.addAgRole(t.image, org, g, r.image);
          }
          break;
        default:
          jj_la1[91] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(61);
      break;
    default:
      jj_la1[92] = jj_gen;
      ;
    }
    label_65:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
        ;
        break;
      default:
        jj_la1[93] = jj_gen;
        break label_65;
      }
      jj_consume_token(EOL);
    }
                              {if (true) return g;}
    throw new Error("Missing return statement in function");
  }

  final public void scheme(JaCaMoOrgParameters org) throws ParseException {
                             Token t; Token type; Token opt; Object oval;
                             JaCaMoSchemeParameters s = new JaCaMoSchemeParameters(project);
    jj_consume_token(SCHEME);
    t = jj_consume_token(ATOM);
    jj_consume_token(59);
    type = jj_consume_token(ATOM);
                                               s.setName(t.image); s.setType(type.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 58:
      jj_consume_token(58);
      label_66:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EOL:
          ;
          break;
        default:
          jj_la1[94] = jj_gen;
          break label_66;
        }
        jj_consume_token(EOL);
      }
      label_67:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DEBUG:
        case ATOM:
          ;
          break;
        default:
          jj_la1[95] = jj_gen;
          break label_67;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DEBUG:
          jj_consume_token(DEBUG);
          label_68:
          while (true) {
            jj_consume_token(EOL);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case EOL:
              ;
              break;
            default:
              jj_la1[96] = jj_gen;
              break label_68;
            }
          }
                                                    s.setDebug(true);
          break;
        case ATOM:
          opt = jj_consume_token(ATOM);
          jj_consume_token(59);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case STRING:
            oval = jj_consume_token(STRING);
            break;
          case REAL:
            oval = jj_consume_token(REAL);
            break;
          case INT:
            oval = jj_consume_token(INT);
            break;
          case VAR:
          case TK_TRUE:
          case TK_FALSE:
          case TK_NEG:
          case TK_BEGIN:
          case TK_END:
          case ATOM:
          case UNNAMEDVAR:
            oval = literal();
            break;
          default:
            jj_la1[97] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          label_69:
          while (true) {
            jj_consume_token(EOL);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case EOL:
              ;
              break;
            default:
              jj_la1[98] = jj_gen;
              break label_69;
            }
          }
                                                                                                       s.addParameter(opt.image,oval.toString());
          break;
        default:
          jj_la1[99] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(61);
      break;
    default:
      jj_la1[100] = jj_gen;
      ;
    }
    label_70:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
        ;
        break;
      default:
        jj_la1[101] = jj_gen;
        break label_70;
      }
      jj_consume_token(EOL);
    }
                              org.addScheme(s);
  }

/*
void deployment(String directory): 
                             { File f = null; ClassParameters cp; Token qty; Token id; Token th; String h; Token t;Token opt; Object oval;
                               List<String> nodes = new ArrayList<String>();
                             }
{
  <MASDEPLOY> 
  [
  ( t=<AST>              { nodes.add(t.image); }
  | (id = <ATOM>         { nodes.add(id.image); }
       ( "," id = <ATOM> { nodes.add(id.image); } )*
    )
  )
  ]               
  [ ":" f = fileName() ]     { if (project == null && f == null) {
                                  throw new ParseException("Deployment without main MAS project");
                               }
                               if (f != null) {
                                   // load project
                                   try {
                                       if (! f.exists()) {
                                            f = new File(directory+"/"+f.toString());
                                       }
                                       JaCaMoProjectParser parser = new JaCaMoProjectParser(new FileReader(f.getAbsolutePath()) );
                                       project = parser.parse(directory);
                                   } catch (FileNotFoundException e) {
                                       throw new ParseException("File not found "+f.getAbsolutePath()+"\n"+e);
                                   }
                               }
                               project.resetDeploymentNode();
                               for (String n: nodes) {
                                   project.addDeploymentNode(n);
                               }
                               if (nodes.isEmpty()) {
                                   project.addDeploymentNode("*");
                               }
                             }
                             
                             
  "{" (<EOL>)*

    (  
      (  
           <CLASSPATH>      ":"  (LOOKAHEAD(4) f = fileName()              (<EOL>|",")+ { project.addClassPath(f.toString());} ) * 
        |  <ASLPATH>        ":"  (LOOKAHEAD(4) f = fileName()              (<EOL>|",")+ { project.addSourcePath(f.toString());} ) *
        |  <PLATFORM>       ":"                                                         { project.resetPlatform(); } 
                                 (LOOKAHEAD(4) cp = classDef()             (<EOL>|",")+ { project.addPlatformParameters(cp);} ) *
        |  <NODE> id = <ATOM>  { h = null; } ["@" h = host() ]             (<EOL>|",")+ { project.addNodeHost(id.image,h); }
        //|  <DEBUG>          ":" (id = <ATOM> 
        //   [ "{" (<EOL>)*
        //         (opt=<ATOM> ":"  (oval=<STRING> | oval=<REAL> | oval=<INT> | oval=literal() ) (<EOL>)+  { project.addDebugParameter(id.image,opt.image,oval.toString()); })* 
        //   "}" ]
        //                                                                   (<EOL>|",")+ { project.addDebugFor(id.image); })*
        //|  <AGINST>         ":"  (qty = <INT> id = <ATOM>  { h = null; } ["@" h = host() ] 
        //                                                      (<EOL>|",")+ { project.addAgInstance(id.image,qty.image,h); } )*
        //|  <WKSINST>        ":"  (id = <ATOM>  { h = null; } ["@" h = host() ] 
        //                                                      (<EOL>|",")+ { project.addWksInstance(id.image,h); } )*                                                                          
      )
    )*
      
  "}" (<EOL>)*
}
*/
  final public String host() throws ParseException {
                              Token t; String host; Token n1; Token n2;Token n3;Token n4;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATOM:
      t = jj_consume_token(ATOM);
                              host = t.image;
      break;
    case STRING:
      t = jj_consume_token(STRING);
                              host = t.image;
      break;
    case IP:
      t = jj_consume_token(IP);
                              host = t.image;
      break;
    default:
      jj_la1[102] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 59:
      jj_consume_token(59);
      t = jj_consume_token(INT);
                           host += ":"+t.image;
      break;
    default:
      jj_la1[103] = jj_gen;
      ;
    }
                              {if (true) return host;}
    throw new Error("Missing return statement in function");
  }

  final public File fileName() throws ParseException {
                              String path = "";
                              Token i;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
    case DOTDOT:
    case ATOM:
    case 62:
    case 63:
      label_71:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 62:
          jj_consume_token(62);
                              path += "/";
          break;
        case 63:
          jj_consume_token(63);
                              path += "-";
          break;
        case DOT:
          i = jj_consume_token(DOT);
                              path += i.image;
          break;
        case DOTDOT:
          i = jj_consume_token(DOTDOT);
                              path += i.image;
          break;
        case ATOM:
          i = jj_consume_token(ATOM);
                              path += i.image;
          break;
        default:
          jj_la1[104] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
        case DOTDOT:
        case ATOM:
        case 62:
        case 63:
          ;
          break;
        default:
          jj_la1[105] = jj_gen;
          break label_71;
        }
      }
      break;
    case STRING:
      i = jj_consume_token(STRING);
                              path = i.image;
      break;
    default:
      jj_la1[106] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                               {if (true) return new File( path );}
    throw new Error("Missing return statement in function");
  }

  final public ClassParameters classDef() throws ParseException {
                                Token c; String s; ClassParameters cp = new ClassParameters();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      c = jj_consume_token(VAR);
      break;
    case ATOM:
      c = jj_consume_token(ATOM);
      break;
    default:
      jj_la1[107] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                           cp.setClassName(c.image);
    label_72:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        ;
        break;
      default:
        jj_la1[108] = jj_gen;
        break label_72;
      }
      jj_consume_token(DOT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        c = jj_consume_token(VAR);
        break;
      case ATOM:
        c = jj_consume_token(ATOM);
        break;
      default:
        jj_la1[109] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                           cp.setClassName(cp.getClassName() + "." + c.image);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 64:
      jj_consume_token(64);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
      case INT:
      case REAL:
      case STRING:
      case ATOM:
      case 66:
        s = parameter();
                                              cp.addParameter(s);
        label_73:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 57:
            ;
            break;
          default:
            jj_la1[110] = jj_gen;
            break label_73;
          }
          jj_consume_token(57);
          s = parameter();
                                              cp.addParameter(s);
        }
        break;
      default:
        jj_la1[111] = jj_gen;
        ;
      }
      jj_consume_token(65);
      break;
    default:
      jj_la1[112] = jj_gen;
      ;
    }
                             {if (true) return cp;}
    throw new Error("Missing return statement in function");
  }

  final public String parameter() throws ParseException {
                             Token c; String s; ClassParameters cp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
    case ATOM:
      cp = classDef();
                             {if (true) return cp.toString();}
      break;
    case INT:
      c = jj_consume_token(INT);
                             {if (true) return c.image;}
      break;
    case REAL:
      c = jj_consume_token(REAL);
                             {if (true) return c.image;}
      break;
    case STRING:
      c = jj_consume_token(STRING);
                             {if (true) return c.image;}
      break;
    case 66:
      s = listParameters();
                             {if (true) return s;}
      break;
    default:
      jj_la1[113] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String listParameters() throws ParseException {
                             String s; List l = new ArrayList();
    jj_consume_token(66);
    s = parameter();
                                     l.add(s);
    label_74:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 57:
        ;
        break;
      default:
        jj_la1[114] = jj_gen;
        break label_74;
      }
      jj_consume_token(57);
      s = parameter();
                                     l.add(s);
    }
    jj_consume_token(67);
                                 {if (true) return l.toString();}
    throw new Error("Missing return statement in function");
  }

// from Jason

/* Literal */
  final public Literal literal() throws ParseException {
                                Pred F; Token k; boolean type = Literal.LPos;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
    case TK_NEG:
    case TK_BEGIN:
    case TK_END:
    case ATOM:
    case UNNAMEDVAR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TK_NEG:
        jj_consume_token(TK_NEG);
                                type = Literal.LNeg;
        break;
      default:
        jj_la1[115] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TK_BEGIN:
      case TK_END:
      case ATOM:
        F = pred();
                                {if (true) return new LiteralImpl(type,F);}
        break;
      case VAR:
      case UNNAMEDVAR:
        F = var();
                                VarTerm vt = (VarTerm)F;
                                vt.setNegated(type);
                                {if (true) return vt;}
        break;
      default:
        jj_la1[116] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case TK_TRUE:
      k = jj_consume_token(TK_TRUE);
                                {if (true) return Literal.LTrue;}
      break;
    case TK_FALSE:
      k = jj_consume_token(TK_FALSE);
                                {if (true) return Literal.LFalse;}
      break;
    default:
      jj_la1[117] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* Annotated Formulae */
  final public Pred pred() throws ParseException {
                        Token K; Pred p; List l; ListTerm lt; Term b;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATOM:
      K = jj_consume_token(ATOM);
      break;
    case TK_BEGIN:
      K = jj_consume_token(TK_BEGIN);
      break;
    case TK_END:
      K = jj_consume_token(TK_END);
      break;
    default:
      jj_la1[118] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                         p = new Pred(K.image);
                         //p.setSrcInfo(new SourceInfo(asSource, K.beginLine));

    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 64:
      jj_consume_token(64);
      l = terms();
      jj_consume_token(65);
                         p.setTerms(l);
      break;
    default:
      jj_la1[119] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 66:
      lt = list();
                         p.setAnnots(lt);
      break;
    default:
      jj_la1[120] = jj_gen;
      ;
    }
                         {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

/* List of terms */
  final public List terms() throws ParseException {
                    ArrayList listTerms = new ArrayList(); Term v; PlanBody o;
    v = term();
                         listTerms.add(v);
    label_75:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 57:
        ;
        break;
      default:
        jj_la1[121] = jj_gen;
        break label_75;
      }
      jj_consume_token(57);
      v = term();
                         listTerms.add(v);
    }
                         listTerms.trimToSize();
                         {if (true) return listTerms;}
    throw new Error("Missing return statement in function");
  }

  final public Term term() throws ParseException {
                         Object o; Token K;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 66:
      o = list();
      break;
    case VAR:
    case TK_TRUE:
    case TK_FALSE:
    case TK_NEG:
    case TK_BEGIN:
    case TK_END:
    case ATOM:
    case UNNAMEDVAR:
      o = literal();
      break;
    case STRING:
      o = string();
      break;
    case INT:
      K = jj_consume_token(INT);
                         {if (true) return ASSyntax.parseNumber(K.image);}
      break;
    case REAL:
      K = jj_consume_token(REAL);
                         {if (true) return ASSyntax.parseNumber(K.image);}
      break;
    default:
      jj_la1[122] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                         {if (true) return changeToAtom(o);}
    throw new Error("Missing return statement in function");
  }

  final public ListTermImpl list() throws ParseException {
                            ListTermImpl lt = new ListTermImpl(); ListTerm last; Token K; Term f;
    jj_consume_token(66);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
    case TK_TRUE:
    case TK_FALSE:
    case TK_NEG:
    case TK_BEGIN:
    case TK_END:
    case INT:
    case REAL:
    case STRING:
    case ATOM:
    case UNNAMEDVAR:
    case 66:
      f = term();
                    last = lt.append(f); lt.setSrcInfo(f.getSrcInfo());
      label_76:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 57:
          ;
          break;
        default:
          jj_la1[123] = jj_gen;
          break label_76;
        }
        jj_consume_token(57);
        f = term();
                    last = last.append(f);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 68:
        jj_consume_token(68);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR:
          K = jj_consume_token(VAR);
                            last.setNext(new VarTerm(K.image));
          break;
        case UNNAMEDVAR:
          K = jj_consume_token(UNNAMEDVAR);
                            last.setNext(UnnamedVar.create(K.image));
          break;
        case 66:
          f = list();
                            last = last.concat((ListTerm)f);
          break;
        default:
          jj_la1[124] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[125] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[126] = jj_gen;
      ;
    }
    jj_consume_token(67);
                            {if (true) return lt;}
    throw new Error("Missing return statement in function");
  }

  final public VarTerm var() throws ParseException {
                      Token K; VarTerm v; ListTerm lt;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      K = jj_consume_token(VAR);
                      v = new VarTerm(K.image);
                      //v.setSrcInfo(new SourceInfo(asSource, K.beginLine));

      break;
    case UNNAMEDVAR:
      K = jj_consume_token(UNNAMEDVAR);
                      v = UnnamedVar.create(K.image);
      break;
    default:
      jj_la1[127] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 66:
      lt = list();
                      v.setAnnots(lt);
      break;
    default:
      jj_la1[128] = jj_gen;
      ;
    }
                      {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  final public StringTerm string() throws ParseException {
                      Token k; StringTermImpl s;
    k = jj_consume_token(STRING);
                      s = new StringTermImpl(k.image.substring(1,k.image.length()-1).replaceAll("\\\\n", "\n"));
                      //s.setSrcInfo(new SourceInfo(asSource,k.beginLine)); 
                      {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_3R_136() {
    if (jj_scan_token(REAL)) return true;
    return false;
  }

  final private boolean jj_3R_135() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  final private boolean jj_3R_134() {
    if (jj_3R_139()) return true;
    return false;
  }

  final private boolean jj_3R_133() {
    if (jj_3R_84()) return true;
    return false;
  }

  final private boolean jj_3R_132() {
    if (jj_3R_128()) return true;
    return false;
  }

  final private boolean jj_3R_129() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_scan_token(ATOM)) return true;
    if (jj_scan_token(ATOM)) return true;
    Token xsp;
    if (jj_3R_94()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_94()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_130() {
    if (jj_scan_token(57)) return true;
    return false;
  }

  final private boolean jj_3R_127() {
    if (jj_3R_129()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_130()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_3R_128()) return true;
    return false;
  }

  final private boolean jj_3R_121() {
    if (jj_scan_token(64)) return true;
    if (jj_3R_127()) return true;
    if (jj_scan_token(65)) return true;
    return false;
  }

  final private boolean jj_3_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) return true;
    }
    if (jj_3R_93()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_93()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_114() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_121()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_scan_token(TK_FALSE)) return true;
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_scan_token(TK_TRUE)) return true;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_3R_115()) return true;
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_3R_114()) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_scan_token(TK_NEG)) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_104()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) return true;
    }
    return false;
  }

  final private boolean jj_3R_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_92() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) return true;
    }
    return false;
  }

  final private boolean jj_3R_126() {
    if (jj_scan_token(66)) return true;
    if (jj_3R_112()) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) return true;
    }
    return false;
  }

  final private boolean jj_3R_88() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) return true;
    }
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_3R_126()) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3R_118() {
    if (jj_scan_token(REAL)) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) return true;
    }
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) return true;
    }
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_3R_80()) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_83() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) return true;
    }
    return false;
  }

  final private boolean jj_3R_113() {
    if (jj_scan_token(57)) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) return true;
    }
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_3R_112()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_113()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_scan_token(64)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) jj_scanpos = xsp;
    if (jj_scan_token(65)) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_scan_token(60)) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_scan_token(DOT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_scan_token(60)) return true;
    if (jj_scan_token(ATOM)) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_scan_token(60)) return true;
    if (jj_scan_token(ATOM)) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_scan_token(ATOM)) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_scan_token(ATOM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_91()) jj_scanpos = xsp;
    if (jj_3R_92()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_92()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_80() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_97()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_98()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_scan_token(ATOM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_90()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_81() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) return true;
    }
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_scan_token(ATOM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_88()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_79() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) return true;
    }
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_scan_token(ATOM)) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_84()) return true;
    Token xsp;
    if (jj_3R_86()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_86()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_78() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) return true;
    }
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_scan_token(DOTDOT)) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_84()) return true;
    Token xsp;
    if (jj_3R_85()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_85()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_scan_token(63)) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_scan_token(62)) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_80()) return true;
    Token xsp;
    if (jj_3R_83()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_83()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_95() {
    Token xsp;
    if (jj_3R_102()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_102()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(INT)) return true;
    Token xsp;
    if (jj_3R_82()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_82()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_77() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) return true;
    }
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_80()) return true;
    Token xsp;
    if (jj_3R_81()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_81()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_77()) return true;
    Token xsp;
    if (jj_3R_79()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_79()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_139() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_77()) return true;
    Token xsp;
    if (jj_3R_78()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_78()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_125() {
    if (jj_3R_128()) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) return true;
    }
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_scan_token(UNNAMEDVAR)) return true;
    return false;
  }

  final private boolean jj_3R_123() {
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  final private boolean jj_3R_115() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_125()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_138() {
    if (jj_scan_token(68)) return true;
    return false;
  }

  final private boolean jj_3R_137() {
    if (jj_scan_token(57)) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) return true;
    }
    return false;
  }

  final private boolean jj_3R_131() {
    if (jj_3R_129()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_137()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_138()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_128() {
    if (jj_scan_token(66)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_131()) jj_scanpos = xsp;
    if (jj_scan_token(67)) return true;
    return false;
  }

  public JaCaMoProjectParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[129];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x80000,0x0,0x0,0x80,0x2000000,0x20000000,0x704000,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x704000,0x0,0x0,0x0,0x83ff00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x83ff00,0x0,0x0,0x0,0x14804000,0x0,0x0,0x0,0x0,0x0,0x0,0x14804000,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0x0,0x0,0x0,0x50004000,0x0,0x0,0x0,0x0,0x20,0x0,0x50004000,0x0,0x0,0xc0800000,0x0,0x0,0x20,0x0,0x0,0x0,0xc0800000,0x0,0x0,0x0,0x800000,0x0,0x20,0x0,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x20,0x0,0x20,0x0,0x20,0x0,0x0,0x20,0x20,0x0,0x0,0x0,0x0,0x20,0x0,0x20,0x0,0x20,0x20,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x400,0x2000000,0x0,0x400,0x400,0x0,0x0,0x0,0x0,0x2000400,0x2000400,0x2000400,0x2000400,0x2000400,0x2000400,0x0,0x10000000,0x2000400,0x2000400,0x0,0x400,0x8000000,0x400,0x40000,0x2000400,0x2000400,0x40000,0x2000400,0x2000400,0x400,0x2000400,0x2000400,0x400,0x400,0x2000400,0x2000400,0x2000400,0x2000400,0x10000000,0x2000400,0x2000400,0x10000000,0x2000400,0x2000400,0x10000000,0x2000400,0x2000400,0x2000400,0x2000400,0xc732c,0x400,0x40000,0x4000000,0x400,0x400,0x0,0x48000,0x48000,0x2000400,0x2000400,0x400,0x400,0x0,0x400,0x400,0x48000,0x48000,0x2000400,0x2000400,0x0,0x4000000,0x400,0x8000000,0x400,0x40001,0x48000,0x2000400,0x2000400,0x400,0xc732c,0x400,0x40001,0x400,0x400,0x40002,0x400,0x400,0xc732c,0x400,0x2000400,0x2000400,0x40002,0x4000000,0x400,0x400,0x40000,0x400,0xc732c,0x400,0x40000,0x4000000,0x400,0x44800,0x8000000,0xc0070000,0xc0070000,0xc0074000,0x40000,0x10000,0x40000,0x2000000,0x47000,0x0,0x47000,0x2000000,0x20,0xc0300,0xc032c,0x40300,0x0,0x0,0x2000000,0xc732c,0x2000000,0x80000,0x0,0xc732c,0x80000,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x1,0x4,0x0,0x0,0x0,0x0,0x0,0x1,0x4,0x0,0x4,0x0,0x4,0x10,0x4,0x0,0x4,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[12];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public JaCaMoProjectParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public JaCaMoProjectParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JaCaMoProjectParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 129; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 129; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public JaCaMoProjectParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JaCaMoProjectParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 129; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 129; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public JaCaMoProjectParser(JaCaMoProjectParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 129; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(JaCaMoProjectParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 129; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[69];
    for (int i = 0; i < 69; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 129; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 69; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 12; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
